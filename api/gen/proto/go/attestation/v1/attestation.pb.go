// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/attestation/v1/attestation.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AttestationRequest is a request to attest a hardware private key.
type AttestationRequest struct {
	// Types that are valid to be assigned to AttestationRequest:
	//	*AttestationRequest_YubikeyAttestationRequest
	AttestationRequest   isAttestationRequest_AttestationRequest `protobuf_oneof:"attestation_request"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *AttestationRequest) Reset()         { *m = AttestationRequest{} }
func (m *AttestationRequest) String() string { return proto.CompactTextString(m) }
func (*AttestationRequest) ProtoMessage()    {}
func (*AttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99516272d9ee5937, []int{0}
}
func (m *AttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationRequest.Merge(m, src)
}
func (m *AttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationRequest proto.InternalMessageInfo

type isAttestationRequest_AttestationRequest interface {
	isAttestationRequest_AttestationRequest()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AttestationRequest_YubikeyAttestationRequest struct {
	YubikeyAttestationRequest *YubiKeyAttestationRequest `protobuf:"bytes,1,opt,name=yubikey_attestation_request,json=yubikeyAttestationRequest,proto3,oneof" json:"yubikey_attestation_request,omitempty"`
}

func (*AttestationRequest_YubikeyAttestationRequest) isAttestationRequest_AttestationRequest() {}

func (m *AttestationRequest) GetAttestationRequest() isAttestationRequest_AttestationRequest {
	if m != nil {
		return m.AttestationRequest
	}
	return nil
}

func (m *AttestationRequest) GetYubikeyAttestationRequest() *YubiKeyAttestationRequest {
	if x, ok := m.GetAttestationRequest().(*AttestationRequest_YubikeyAttestationRequest); ok {
		return x.YubikeyAttestationRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttestationRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttestationRequest_YubikeyAttestationRequest)(nil),
	}
}

// YubiKeyAttestationRequest is a request to attest a specific YubiKey PIV slot.
type YubiKeyAttestationRequest struct {
	// slot_cert is an attestation certificate generated from a YubiKey PIV
	// slot's public key and signed by the YubiKey's attestation certificate.
	SlotCert []byte `protobuf:"bytes,1,opt,name=slot_cert,json=slotCert,proto3" json:"slot_cert,omitempty"`
	// attestation_cert is the YubiKey's unique attestation certificate, signed by a Yubico CA.
	AttestationCert      []byte   `protobuf:"bytes,2,opt,name=attestation_cert,json=attestationCert,proto3" json:"attestation_cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YubiKeyAttestationRequest) Reset()         { *m = YubiKeyAttestationRequest{} }
func (m *YubiKeyAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*YubiKeyAttestationRequest) ProtoMessage()    {}
func (*YubiKeyAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99516272d9ee5937, []int{1}
}
func (m *YubiKeyAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YubiKeyAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YubiKeyAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YubiKeyAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YubiKeyAttestationRequest.Merge(m, src)
}
func (m *YubiKeyAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *YubiKeyAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_YubiKeyAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_YubiKeyAttestationRequest proto.InternalMessageInfo

func (m *YubiKeyAttestationRequest) GetSlotCert() []byte {
	if m != nil {
		return m.SlotCert
	}
	return nil
}

func (m *YubiKeyAttestationRequest) GetAttestationCert() []byte {
	if m != nil {
		return m.AttestationCert
	}
	return nil
}

func init() {
	proto.RegisterType((*AttestationRequest)(nil), "teleport.attestation.v1.AttestationRequest")
	proto.RegisterType((*YubiKeyAttestationRequest)(nil), "teleport.attestation.v1.YubiKeyAttestationRequest")
}

func init() {
	proto.RegisterFile("teleport/attestation/v1/attestation.proto", fileDescriptor_99516272d9ee5937)
}

var fileDescriptor_99516272d9ee5937 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x49, 0xcd, 0x49,
	0x2d, 0xc8, 0x2f, 0x2a, 0xd1, 0x4f, 0x2c, 0x29, 0x49, 0x2d, 0x2e, 0x49, 0x2c, 0xc9, 0xcc, 0xcf,
	0xd3, 0x2f, 0x33, 0x44, 0xe6, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0xc3, 0x94, 0xea,
	0x21, 0xcb, 0x95, 0x19, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0xd5, 0xe8, 0x83, 0x58, 0x10,
	0xe5, 0x4a, 0x0b, 0x19, 0xb9, 0x84, 0x1c, 0x11, 0x0a, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x4a, 0xb8, 0xa4, 0x2b, 0x4b, 0x93, 0x32, 0xb3, 0x53, 0x2b, 0xe3, 0x91, 0x8c, 0x89, 0x2f,
	0x82, 0x48, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x19, 0xe9, 0xe1, 0xb0, 0x4b, 0x2f, 0xb2,
	0x34, 0x29, 0xd3, 0x3b, 0xb5, 0x12, 0xd3, 0x60, 0x0f, 0x86, 0x20, 0x49, 0xa8, 0xc1, 0x98, 0x92,
	0x4e, 0xa2, 0x5c, 0xc2, 0x58, 0x6c, 0x53, 0x4a, 0xe6, 0x92, 0xc4, 0x69, 0xa0, 0x90, 0x34, 0x17,
	0x67, 0x71, 0x4e, 0x7e, 0x49, 0x7c, 0x72, 0x6a, 0x11, 0xc4, 0x5d, 0x3c, 0x41, 0x1c, 0x20, 0x01,
	0xe7, 0xd4, 0xa2, 0x12, 0x21, 0x4d, 0x2e, 0x01, 0x64, 0x03, 0xc1, 0x6a, 0x98, 0xc0, 0x6a, 0xf8,
	0x91, 0xc4, 0x41, 0x4a, 0x9d, 0xfc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x28, 0xc7, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd,
	0xf4, 0xa2, 0xc4, 0xb2, 0x4c, 0x88, 0xca, 0xc4, 0x1c, 0x7d, 0x44, 0x4c, 0x14, 0x64, 0xea, 0xa7,
	0xa7, 0xe6, 0xe9, 0xc3, 0x82, 0x14, 0x2d, 0x6a, 0x92, 0xd8, 0xc0, 0x12, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x65, 0xf3, 0x54, 0xe4, 0xbc, 0x01, 0x00, 0x00,
}

func (m *AttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AttestationRequest != nil {
		{
			size := m.AttestationRequest.Size()
			i -= size
			if _, err := m.AttestationRequest.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttestationRequest_YubikeyAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationRequest_YubikeyAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.YubikeyAttestationRequest != nil {
		{
			size, err := m.YubikeyAttestationRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *YubiKeyAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YubiKeyAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YubiKeyAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AttestationCert) > 0 {
		i -= len(m.AttestationCert)
		copy(dAtA[i:], m.AttestationCert)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.AttestationCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SlotCert) > 0 {
		i -= len(m.SlotCert)
		copy(dAtA[i:], m.SlotCert)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.SlotCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttestation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttestation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttestationRequest != nil {
		n += m.AttestationRequest.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationRequest_YubikeyAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.YubikeyAttestationRequest != nil {
		l = m.YubikeyAttestationRequest.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}
func (m *YubiKeyAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlotCert)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.AttestationCert)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAttestation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttestation(x uint64) (n int) {
	return sovAttestation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YubikeyAttestationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &YubiKeyAttestationRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttestationRequest = &AttestationRequest_YubikeyAttestationRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YubiKeyAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YubiKeyAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YubiKeyAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotCert = append(m.SlotCert[:0], dAtA[iNdEx:postIndex]...)
			if m.SlotCert == nil {
				m.SlotCert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationCert = append(m.AttestationCert[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationCert == nil {
				m.AttestationCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttestation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttestation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttestation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttestation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttestation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttestation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttestation = fmt.Errorf("proto: unexpected end of group")
)
