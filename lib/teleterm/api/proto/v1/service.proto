// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.terminal.v1;

import "v1/app.proto";
import "v1/auth_settings.proto";
import "v1/cluster.proto";
import "v1/database.proto";
import "v1/gateway.proto";
import "v1/kube.proto";
import "v1/server.proto";

option go_package = "github.com/gravitational/teleport/lib/teleterm/v1";

// TerminalService describes Teleterm service
service TerminalService {
  // ListRootClusters lists root clusters
  rpc ListRootClusters(ListClustersRequest) returns (ListClustersResponse);
  // ListLeafClusters lists leaf clusters
  rpc ListLeafClusters(ListLeafClustersRequest) returns (ListClustersResponse);
  // ListDatabases lists databases
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);
  // ListDatabaseUsers lists allowed users for the given database based on the role set.
  rpc ListDatabaseUsers(ListDatabaseUsersRequest) returns (ListDatabaseUsersResponse);
  // ListServers lists servers
  rpc ListServers(ListServersRequest) returns (ListServersResponse);
  // ListKubes list kubes
  //#rpc ListKubes(ListKubesRequest) returns (ListKubesResponse);
  // ListApps list apps
  //#rpc ListApps(ListAppsRequest) returns (ListAppsResponse);
  // AddCluster adds a cluster to profile
  rpc AddCluster(AddClusterRequest) returns (Cluster);
  // RemoveCluster removes a cluster from profile
  rpc RemoveCluster(RemoveClusterRequest) returns (EmptyResponse);

  // ListGateways lists gateways
  rpc ListGateways(ListGatewaysRequest) returns (ListGatewaysResponse);
  // CreateGateway creates a gateway
  rpc CreateGateway(CreateGatewayRequest) returns (Gateway);
  // RemoveGateway removes a gateway
  rpc RemoveGateway(RemoveGatewayRequest) returns (EmptyResponse);
  // RestartGateway stops a gateway and starts a new with identical parameters, keeping the
  // original URI. A temporary workaround until it's possible to refresh certs in a running
  // database proxy.
  rpc RestartGateway(RestartGatewayRequest) returns (EmptyResponse);
  // SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
  // and returns the updated version of gateway.Gateway.
  //
  // In Connect this is used to update the db name of a db connection along with the CLI command.
  rpc SetGatewayTargetSubresourceName(SetGatewayTargetSubresourceNameRequest) returns (Gateway);
  // SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
  // assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
  rpc SetGatewayLocalPort(SetGatewayLocalPortRequest) returns (Gateway);

  // GetAuthSettings returns cluster auth settigns
  rpc GetAuthSettings(GetAuthSettingsRequest) returns (AuthSettings);
  // GetCluster returns a cluster
  rpc GetCluster(GetClusterRequest) returns (Cluster);
  // Login logs in a user to a cluster
  rpc Login(LoginRequest) returns (EmptyResponse);
  // LoginPasswordless logs in a user to a cluster passwordlessly.
  //
  // The RPC is streaming both ways and the message sequence example for hardware keys are:
  // (-> means client-to-server, <- means server-to-client)
  //
  // Hardware keys:
  // -> Init
  // <- Send PasswordlessPrompt enum TAP to choose a device
  // -> Receive TAP device response
  // <- Send PasswordlessPrompt enum PIN
  // -> Receive PIN response
  // <- Send PasswordlessPrompt enum RETAP to confirm
  // -> Receive RETAP device response
  // <- Send list of credentials (e.g. usernames) associated with device
  // -> Receive the index number associated with the selected credential in list
  // <- End
  rpc LoginPasswordless(stream LoginPasswordlessRequest) returns (stream LoginPasswordlessResponse);
  // ClusterLogin logs out a user from cluster
  rpc Logout(LogoutRequest) returns (EmptyResponse);
}

// RemoveClusterRequest describes RemoveClusterRequest
message RemoveClusterRequest {
  string cluster_uri = 1;
}

// GetClusterRequest describes GetClusterRequest
message GetClusterRequest {
  string cluster_uri = 1;
}

// LogoutRequest describes LogoutRequest
message LogoutRequest {
  string cluster_uri = 1;
}

// PasswordlessPrompt describes different prompts we need from users
// during the passwordless login flow.
enum PasswordlessPrompt {
  PASSWORDLESS_PROMPT_UNSPECIFIED = 0;

  // PASSWORDLESS_PROMPT_PIN is used when we need a user's pin.
  PASSWORDLESS_PROMPT_PIN = 1;

  // PASSWORDLESS_PROMPT_TAP is used when we require a user to tap their device.
  PASSWORDLESS_PROMPT_TAP = 2;

  // PASSWORDLESS_PROMPT_CREDENTIAL is used when we require a user to select a username
  // associated with their account.
  PASSWORDLESS_PROMPT_CREDENTIAL = 3;
}

// CredentialInfo holds fields related to a user's WebAuthn credential.
message CredentialInfo {
  string username = 1;
}

// LoginPasswordlessResponse is a message sent by the server during the
// passwordless login flow.
message LoginPasswordlessResponse {
  PasswordlessPrompt prompt = 1;
  repeated CredentialInfo credentials = 2;
}

// LoginPasswordlessRequest is a message sent by the client during the passwordless login flow.
message LoginPasswordlessRequest {
  oneof request {
    LoginPasswordlessRequestInit init = 1;
    LoginPasswordlessPINResponse pin = 2;
    LoginPasswordlessCredentialResponse credential = 3;
  }

  // LoginPasswordlessRequestInit contains fields needed to init the stream request.
  message LoginPasswordlessRequestInit {
    // cluster_uri is needed to resolve cluster by its uri.
    string cluster_uri = 1;
  }

  // LoginPasswordlessPINResponse contains fields related to request from webauthncli.PromptPIN.
  message LoginPasswordlessPINResponse {
    // pin is the user's device's pin.
    string pin = 1;
  }

  // LoginPasswordlessPINResponse contains fields related to request from
  // webauthncli.PromptCredential.
  message LoginPasswordlessCredentialResponse {
    // index is the associated number in the list of credentials that the user selected to log
    // in as.
    int64 index = 1;
  }
}

// LoginRequest describes cluster login request
message LoginRequest {
  // cluster_uri is the cluster uri
  string cluster_uri = 1;

  oneof params {
    // local holds parameters for local logins
    LocalParams local = 2;
    // sso holds parameters for sso logins
    SsoParams sso = 3;
  }

  // LocalParams describes parameters for local user logins
  message LocalParams {
    // user is the user name
    string user = 1;
    // password is the user password
    string password = 2;
    // token is the 2FA token
    string token = 3;
  }

  // SsoParams describes SSO parameters
  message SsoParams {
    // provider_type is the provider type
    string provider_type = 1;
    // provider_name is the provider name
    string provider_name = 2;
  }
}

message AddClusterRequest {
  string name = 1;
}

message ListKubesRequest {
  string cluster_uri = 1;
}

message ListAppsRequest {
  string cluster_uri = 1;
}

message ListClustersRequest {}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message ListDatabasesRequest {
  string cluster_uri = 1;
}

message ListLeafClustersRequest {
  string cluster_uri = 1;
}

message ListDatabasesResponse {
  repeated Database databases = 1;
}

message ListDatabaseUsersRequest {
  string db_uri = 1;
}

message ListDatabaseUsersResponse {
  repeated string users = 1;
}

message CreateGatewayRequest {
  string target_uri = 1;
  string target_user = 2;
  string local_port = 3;
  string target_subresource_name = 4;
}

message ListGatewaysRequest {
  repeated string cluster_ids = 1;
}

message ListGatewaysResponse {
  repeated Gateway gateways = 1;
}

message RemoveGatewayRequest {
  string gateway_uri = 1;
}

message RestartGatewayRequest {
  string gateway_uri = 1;
}

message SetGatewayTargetSubresourceNameRequest {
  string gateway_uri = 1;
  string target_subresource_name = 2;
}

message SetGatewayLocalPortRequest {
  string gateway_uri = 1;
  string local_port = 2;
}

message ListServersRequest {
  string cluster_uri = 1;
}

message ListServersResponse {
  repeated Server servers = 1;
}

message ListKubesResponse {
  repeated Kube kubes = 1;
}

message ListAppsResponse {
  repeated App apps = 1;
}

message GetAuthSettingsRequest {
  string cluster_uri = 1;
}

message EmptyResponse {}
