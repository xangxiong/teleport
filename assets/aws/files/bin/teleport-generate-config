#!/bin/bash
if [[ "${DEBUG:-false}" == "true" ]]; then
    set -x
fi

## Test functions
# Returns true in test mode and false otherwise
is_test() { [[ "${TELEPORT_TEST_MODE}" == "true" ]]; }
# Check for FIPS
# In regular mode, we do this by looking at the ExecStart command for teleport.service to see whether it
# contains 'fips' or not (which is set during packer build). We use this to modify the auth service's
# configuration depending on whether FIPS is in use or not.
# In test mode, it uses the value of the TELEPORT_TEST_FIPS_MODE variable.
is_fips() {
    if is_test; then
        if [[ "${TELEPORT_TEST_FIPS_MODE}" == "true" ]]; then return 0; else return 1; fi
    else
        grep "ExecStart" /etc/systemd/system/teleport.service | grep -q "fips"
    fi
}
# systemctl wrapper which just echoes commands in test mode rather than running them
systemctl_wrap() { if is_test; then echo "$@"; else systemctl "$@"; fi }

# Allow the config paths to be overridden for testing
USE_CONFIG_PATH="${TELEPORT_CONFIG_PATH:-/etc/teleport.yaml}"
USE_CONFD_DIR="${TELEPORT_CONFD_DIR:-/etc/teleport.d}"
# If a copy of the Teleport config file already exists, don't change it
# and just exit this script with success.
if [ -f ${USE_CONFIG_PATH} ]; then
    # Optionally allow this behaviour to be suppressed for tests.
    if ! is_test; then
        echo "${USE_CONFIG_PATH} already exists. Exiting with success."
        exit 0
    fi
fi

# Source variables from user-data file
# shellcheck disable=SC1090
source "${USE_CONFD_DIR}/conf"

## Helper functions
aws_metadata_get() {
    # request path is the part after /latest/ i.e. meta-data/local-ipv4
    REQUEST="$1"
    CURL_EXTRA_ARGS=""
    if [[ "$2" != "" ]]; then
        CURL_EXTRA_ARGS="$2"
    fi
    case $REQUEST in
        LOCAL_IP)
            REQUEST_PATH="meta-data/local-ipv4"
            ;;
        LOCAL_HOSTNAME)
            REQUEST_PATH="meta-data/local-hostname"
            ;;
        PUBLIC_IP)
            REQUEST_PATH="meta-data/public-ipv4"
            ;;
        *)
            echo "No request path defined for ${REQUEST}"
            exit 126
            ;;
    esac

    if ! is_test; then
        IMDS_TOKEN=$(curl -m5 -sS -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 300")
        IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: ${IMDS_TOKEN}"
        curl -m5 -sS -H "${IMDS_TOKEN_HEADER}" ${CURL_EXTRA_ARGS} http://169.254.169.254/latest/${REQUEST_PATH}
    else
        # return a pre-calculated value
        VARIABLE="TELEPORT_TESTVAR_${REQUEST}"
        echo "${!VARIABLE}"
    fi
}

write_https_keypairs_section() {
  cat << EOS >> ${USE_CONFIG_PATH}
  https_keypairs:
    - cert_file: /var/lib/teleport/fullchain.pem
      key_file: /var/lib/teleport/privkey.pem
EOS
}

write_database_section() {
    # use the value of the variable name which was passed in
    # this is done because there are two different ways of getting the external hostname
    # depending on how the AMI is being used and we should support both
    EXTERNAL_HOSTNAME="${!1}"
    if [[ "${USE_ACM}" == "true" && "${TELEPORT_PROXY_SERVER_LB}" != "" ]]; then
        # if an alias for the ACM NLB is configured, use that for proxy's database public_addrs
        if [[ "${TELEPORT_PROXY_SERVER_NLB_ALIAS}" != "" ]]; then
            MYSQL_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_NLB_ALIAS}:3036'"
            POSTGRES_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_NLB_ALIAS}:5432'"
            MONGO_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_NLB_ALIAS}:27017'"
        else
            MYSQL_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_LB}:3036'"
            POSTGRES_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_LB}:5432'"
            MONGO_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_LB}:27017'"
        fi
    else
        MYSQL_PUBLIC_ADDR="'${EXTERNAL_HOSTNAME:-$PUBLIC_IP}:3036'"
        POSTGRES_PUBLIC_ADDR="'${EXTERNAL_HOSTNAME:-$PUBLIC_IP}:5432'"
        MONGO_PUBLIC_ADDR="'${EXTERNAL_HOSTNAME:-$PUBLIC_IP}:27017'"
    fi
   # set up the database listeners and public addresses
    if [[ "${TELEPORT_ENABLE_MYSQL}" == "true" ]]; then
    cat << EOS >> ${USE_CONFIG_PATH}
  mysql_listen_addr: "0.0.0.0:3036"
  mysql_public_addr: ${MYSQL_PUBLIC_ADDR}
EOS
   fi
   # Add the postgres listener only if the POSTGRES_HOST is blank
   if [[ "${TELEPORT_ENABLE_POSTGRES}" == "true" && "${POSTGRES_HOSTNAME}" == "" ]]; then
    cat << EOS >> ${USE_CONFIG_PATH}
  postgres_listen_addr: "0.0.0.0:5432"
  postgres_public_addr: ${POSTGRES_PUBLIC_ADDR}
EOS
   fi
   if [[ "${TELEPORT_ENABLE_MONGODB}" == "true" ]]; then
    cat << EOS >> ${USE_CONFIG_PATH}
  mongo_listen_addr: "0.0.0.0:27017"
  mongo_public_addr: ${MONGO_PUBLIC_ADDR}
EOS
   fi
}

write_kubernetes_section() {
    # use the value of the variable name which was passed in
    # this is done because there are two different ways of getting the external hostname
    # depending on how the AMI is being used and we should support both
    EXTERNAL_HOSTNAME="${!1}"
    if [[ "${USE_ACM}" == "true" && "${TELEPORT_PROXY_SERVER_LB}" != "" ]]; then
        # if an alias for the ACM NLB is configured, use that for proxy's kubernetes public_addr
        if [[ "${TELEPORT_PROXY_SERVER_NLB_ALIAS}" != "" ]]; then
            KUBERNETES_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_NLB_ALIAS}:3026'"
        else
            KUBERNETES_PUBLIC_ADDR="'${TELEPORT_PROXY_SERVER_LB}:3026'"
        fi
    else
        KUBERNETES_PUBLIC_ADDR="'${EXTERNAL_HOSTNAME:-$PUBLIC_IP}:3026'"
    fi
    # set up the kubernetes listener
    cat << EOS >> ${USE_CONFIG_PATH}
  kubernetes:
    enabled: yes
    listen_addr: 0.0.0.0:3026
    public_addr: [${KUBERNETES_PUBLIC_ADDR}]
EOS
}

write_ssh_and_tunnel_section() {
    PASSED_EXTERNAL_TUNNEL_PORT="$1"
    SSH_PORT=3023
    POSTGRES_PORT=443
    if [[ "${TELEPORT_PROXY_SERVER_LB}" != "" ]]; then
        # ACM
        if [[ "${USE_ACM}" == "true" ]]; then
            TUNNEL_PORT="${TUNNEL_LISTEN_PORT}"
            SSH_HOSTNAME="${TELEPORT_PROXY_SERVER_LB}"
            TUNNEL_HOSTNAME="${TELEPORT_PROXY_SERVER_LB}"

            if [[ "${TELEPORT_PROXY_SERVER_NLB_ALIAS}" != "" ]]; then
                # if an alias for the ACM NLB is configured, use that for the proxy's ssh_public_addr
                SSH_HOSTNAME="${TELEPORT_PROXY_SERVER_NLB_ALIAS}"
                # when using ACM, we have to set up a dedicated listener and target group as
                # SSL termination is handled by the ACM ALB and it can't multiplex the tunnel connections
                TUNNEL_HOSTNAME="${TELEPORT_PROXY_SERVER_NLB_ALIAS}"
                # when using ACM, we have to add a specific public addr for postgres which lives on the NLB
                # (rather than the ACM ALB) so that Teleport's multiplexer can be used to route connections
                POSTGRES_HOSTNAME="${TELEPORT_PROXY_SERVER_NLB_ALIAS}"
            fi
        # non-ACM
        else
            TUNNEL_PORT="${PASSED_EXTERNAL_TUNNEL_PORT}"
            TUNNEL_HOSTNAME="${TELEPORT_EXTERNAL_HOSTNAME:-$PUBLIC_IP}"
            SSH_HOSTNAME="${TELEPORT_EXTERNAL_HOSTNAME:-$PUBLIC_IP}"
            if [[ "${TELEPORT_DOMAIN_NAME}" != "" ]]; then
                # check whether an external domain name is configured (HA mode)
                # if not (starter mode), use an external hostname if configured, and fall back to public IP
                SSH_HOSTNAME="${TELEPORT_DOMAIN_NAME}"
                # when ACM is not being used, Teleport handles SSL termination itself and so tunnel connections
                # can be multiplexed over the same connection as regular web proxy traffic
                # this is automatically enabled when Teleport's web and tunnel listeners are configured to use the same port
                TUNNEL_HOSTNAME="${TELEPORT_DOMAIN_NAME}"
            fi
        fi
    fi
    # if postgres hostname is set, add it to the config
    # if not, don't add it and use teleport's default
    if [[ "${POSTGRES_HOSTNAME}" != "" ]]; then
      echo "  postgres_public_addr: ${POSTGRES_HOSTNAME}:${POSTGRES_PORT}" >> ${USE_CONFIG_PATH}
    fi
    cat << EOS >> ${USE_CONFIG_PATH}
  ssh_public_addr: ${SSH_HOSTNAME}:${SSH_PORT}
  tunnel_public_addr: ${TUNNEL_HOSTNAME}:${TUNNEL_PORT}
EOS
}

## Start
# Set up AWS variables
LOCAL_IP=$(aws_metadata_get LOCAL_IP)
LOCAL_HOSTNAME=$(aws_metadata_get LOCAL_HOSTNAME)
LOCAL_HOSTNAME=${LOCAL_HOSTNAME//./-}
if aws_metadata_get PUBLIC_IP -i | grep -q 404; then
    PUBLIC_IP=${LOCAL_IP}
else
    PUBLIC_IP=$(aws_metadata_get PUBLIC_IP)
fi

# If the teleport user and adm group exist, create /var/lib/teleport if it doesn't exist
# and fix permissions appropriately
if getent passwd teleport >/dev/null 2>&1 && getent group adm >/dev/null 2>&1; then
    if [ ! -d /var/lib/teleport ]; then
        mkdir -p /var/lib/teleport
    fi
    chown -R teleport:adm /var/lib/teleport
fi
touch ${USE_CONFIG_PATH}
chmod 664 ${USE_CONFIG_PATH}

# Use letsencrypt by default unless we are explicitly using ACM here
if [[ "${USE_ACM}" != "true" ]]; then
    rm -f ${USE_CONFD_DIR}/role.all-acm
    echo "use-letsencrypt" > ${USE_CONFD_DIR}/use-letsencrypt
fi

# Determine whether this is a FIPS AMI or not
# With FIPS: auth_service.authentication.local_auth must be 'false' or Teleport will not start
# Without FIPS: auth.service.authentication.second_factor should be set to 'otp'
AUTHENTICATION_STANZA="second_factor: otp"
if is_fips; then
    AUTHENTICATION_STANZA="local_auth: false"
fi
# If auth type is set in the Terraform variables, add this to the config on the auth servers.
if [[ "${TELEPORT_AUTH_TYPE}" != "" ]]; then
  AUTHENTICATION_STANZA="type: ${TELEPORT_AUTH_TYPE}
    ${AUTHENTICATION_STANZA}"
fi

if [[ "${TELEPORT_ROLE}" == "auth" ]]; then
    echo "auth" > ${USE_CONFD_DIR}/role.auth
    # Teleport Auth server is using DynamoDB as a backend
    # On AWS, see dynamodb.tf for details
    cat >${USE_CONFIG_PATH} <<EOF
teleport:
  nodename: ${LOCAL_HOSTNAME}
  advertise_ip: ${LOCAL_IP}
  log:
    output: stderr
    severity: INFO
  data_dir: /var/lib/teleport
  storage:
    type: dynamodb
    region: ${EC2_REGION}
    table_name: ${TELEPORT_DYNAMO_TABLE_NAME}
    audit_events_uri: dynamodb://${TELEPORT_DYNAMO_EVENTS_TABLE_NAME}
    audit_sessions_uri: s3://${TELEPORT_S3_BUCKET}/records

ssh_service:
  enabled: no

proxy_service:
  enabled: no

auth_service:
  enabled: yes
  public_addr: ${TELEPORT_AUTH_SERVER_LB}:3025
  keep_alive_interval: 1m
  keep_alive_count_max: 3
  listen_addr: 0.0.0.0:3025
  authentication:
    ${AUTHENTICATION_STANZA}
  cluster_name: ${TELEPORT_CLUSTER_NAME}
EOF

    # copy and set up license if provided
    if [[ "${TELEPORT_LICENSE_PATH}" != "" ]]; then
        aws ssm get-parameter --with-decryption --name /teleport/${TELEPORT_CLUSTER_NAME}/license --region ${EC2_REGION} --query 'Parameter.Value' --output text > /var/lib/teleport/license.pem
        chown teleport:adm /var/lib/teleport/license.pem
        echo "  license_file: /var/lib/teleport/license.pem" >> ${USE_CONFIG_PATH}
    fi

    # enable/start token services and timers
    systemctl_wrap enable teleport-ssm-publish-tokens.service teleport-ssm-publish-tokens.timer
    systemctl_wrap start teleport-ssm-publish-tokens.timer

    # enable/start cert services and timers
    systemctl_wrap enable teleport-get-cert.service teleport-get-cert.timer
    systemctl_wrap enable teleport-renew-cert.service teleport-renew-cert.timer
    systemctl_wrap start --no-block teleport-get-cert.timer
    systemctl_wrap start --no-block teleport-renew-cert.timer

    # enable auth service and disable all-in-one
    systemctl_wrap disable teleport.service
    systemctl_wrap enable teleport-auth.service
    systemctl_wrap start --no-block teleport-auth.service

elif [[ "${TELEPORT_ROLE}" == "proxy" ]]; then
    if [[ "${USE_ACM}" == "true" ]]; then
        echo "proxy-acm" > ${USE_CONFD_DIR}/role.proxy-acm
        # tunnel_listen_addr needs to be changed if we're using ACM as the listener cannot understand HTTP, only HTTPS
        TUNNEL_LISTEN_PORT=3024
    else
        echo "proxy" > ${USE_CONFD_DIR}/role.proxy
        TUNNEL_LISTEN_PORT=3080
    fi
    # Teleport proxy proxies and optionally records
    # SSH sessions
    cat >${USE_CONFIG_PATH} <<EOF
version: v3
teleport:
  join_params:
    join_method: token
    token_name: /var/lib/teleport/token
  ca_pin: CA_PIN_HASH_PLACEHOLDER
  nodename: ${LOCAL_HOSTNAME}
  advertise_ip: ${LOCAL_IP}
  cache:
    type: in-memory
  connection_limits:
    max_connections: 65000
    max_users: 10000
  log:
    output: stderr
    severity: INFO
  data_dir: /var/lib/teleport
  storage:
    type: dir
    path: /var/lib/teleport/backend
  auth_server: ${TELEPORT_AUTH_SERVER_LB}:3025

auth_service:
  enabled: no

ssh_service:
  enabled: no

proxy_service:
  enabled: yes
  listen_addr: 0.0.0.0:3023
  tunnel_listen_addr: 0.0.0.0:${TUNNEL_LISTEN_PORT}
  web_listen_addr: 0.0.0.0:3080
  public_addr: ${TELEPORT_DOMAIN_NAME}:443
EOF

    # write ssh/tunnel config
    write_ssh_and_tunnel_section 443

    # if we are using letsencrypt (i.e. not ACM) then append config lines
    if [[ "${USE_ACM}" != "true" ]]; then
        write_https_keypairs_section
    fi

    # set up the database listeners
    write_database_section TELEPORT_DOMAIN_NAME

    # set up the kubernetes listener
    write_kubernetes_section TELEPORT_DOMAIN_NAME

    # enable/start cert services and timers
    systemctl_wrap enable teleport-check-cert.service teleport-check-cert.timer
    systemctl_wrap start --no-block teleport-check-cert.timer

    # enable proxy service and disable all-in-one
    # skip TLS verification if we are using ACM (as we can't get the cert for use locally, it's on the load balancer)
    systemctl_wrap disable teleport.service
    if [[ "${USE_ACM}" == "true" ]]; then
        systemctl_wrap enable teleport-proxy-acm.service
        systemctl_wrap start --no-block teleport-proxy-acm.service
    else
        systemctl_wrap enable teleport-proxy.service
        systemctl_wrap start --no-block teleport-proxy.service
    fi

elif [[ "${TELEPORT_ROLE}" == "node" ]]; then
    echo "node" > ${USE_CONFD_DIR}/role.node
    # Teleport node handles incoming connections
    cat >${USE_CONFIG_PATH} <<EOF
version: v3
teleport:
  join_params:
      join_method: token
      token_name: /var/lib/teleport/token
  ca_pin: CA_PIN_HASH_PLACEHOLDER
  nodename: ${LOCAL_HOSTNAME}
  advertise_ip: ${LOCAL_IP}
  log:
    output: stderr
    severity: INFO
  data_dir: /var/lib/teleport
  storage:
    type: dir
    path: /var/lib/teleport/backend
  auth_server: ${TELEPORT_AUTH_SERVER_LB}:443

auth_service:
  enabled: no

ssh_service:
  enabled: yes
  listen_addr: 0.0.0.0:3022

proxy_service:
  enabled: no
EOF

    # enable node service and disable all-in-one
    systemctl_wrap disable teleport.service
    systemctl_wrap enable teleport-node.service
    systemctl_wrap start --no-block teleport-node.service

elif [[ "${TELEPORT_ROLE}" == "monitor" ]]; then
    echo "monitor" > ${USE_CONFD_DIR}/role.monitor
    # disable teleport service if this has the monitor role
    systemctl_wrap disable teleport.service
    # no teleport config needed
    rm -f ${USE_CONFIG_PATH}
    # run monitor setup as an independent service
    systemctl_wrap start --no-block teleport-monitor-setup.service

elif [[ "${TELEPORT_ROLE}" == "auth,node,proxy" ]]; then
    echo "Teleport all-in-one configuration selected."

    # tunnel_listen_addr needs to be changed if we're using ACM as the listener cannot understand HTTP, only HTTPS
    if [[ "${USE_ACM}" == "true" ]]; then
        rm -f ${USE_CONFD_DIR}/use-letsencrypt
        rm -f ${USE_CONFD_DIR}/role.all
        echo "all-acm" > ${USE_CONFD_DIR}/role.all-acm
        TUNNEL_LISTEN_PORT=3024
    else
        rm -f ${USE_CONFD_DIR}/role.all-acm
        echo "all" > ${USE_CONFD_DIR}/role.all
        TUNNEL_LISTEN_PORT=3080
    fi

    cat >${USE_CONFIG_PATH} <<EOF
# Auto-generated by /usr/local/bin/teleport-generate-config from values in ${USE_CONFD_DIR}/conf
teleport:
  nodename: ${LOCAL_HOSTNAME}
  advertise_ip: ${LOCAL_IP}
  log:
    output: stderr
    severity: INFO
  data_dir: /var/lib/teleport
EOF

    # determine if dynamodb and s3 should be configured, if not, default to dir storage
    if [[ "${TELEPORT_DYNAMO_TABLE_NAME}" != "" && "${TELEPORT_DYNAMO_EVENTS_TABLE_NAME}" != "" && "${TELEPORT_S3_BUCKET}" != "" ]]; then
        echo "Found DynamoDB settings, using DynamoDB and S3 for storage."
        cat >>${USE_CONFIG_PATH} <<EOF
  storage:
    type: dynamodb
    region: ${EC2_REGION}
    table_name: ${TELEPORT_DYNAMO_TABLE_NAME}
    audit_events_uri: dynamodb://${TELEPORT_DYNAMO_EVENTS_TABLE_NAME}
    audit_sessions_uri: s3://${TELEPORT_S3_BUCKET}/records
EOF
    else
        echo "Missing DynamoDB settings, using local dir storage."
        cat >>${USE_CONFIG_PATH} <<EOF
  storage:
    type: dir
    path: /var/lib/teleport/backend
EOF
    fi

    cat >>${USE_CONFIG_PATH} <<EOF

auth_service:
  enabled: yes
  keep_alive_interval: 1m
  keep_alive_count_max: 3
  listen_addr: 0.0.0.0:3025
  authentication:
    ${AUTHENTICATION_STANZA}
  cluster_name: ${TELEPORT_CLUSTER_NAME}
EOF

    # copy and set up license if provided
    if [[ "${TELEPORT_LICENSE_PATH}" != "" ]]; then
        aws ssm get-parameter --with-decryption --name /teleport/${TELEPORT_CLUSTER_NAME}/license --region ${EC2_REGION} --query 'Parameter.Value' --output text > /var/lib/teleport/license.pem
        chown teleport:adm /var/lib/teleport/license.pem
        echo "  license_file: /var/lib/teleport/license.pem" >> ${USE_CONFIG_PATH}
    fi

cat >>${USE_CONFIG_PATH} <<EOF

ssh_service:
  enabled: yes
  listen_addr: 0.0.0.0:3022

proxy_service:
  enabled: yes
  listen_addr: 0.0.0.0:3023
  tunnel_listen_addr: 0.0.0.0:${TUNNEL_LISTEN_PORT}
  web_listen_addr: 0.0.0.0:3080
  public_addr: ${TELEPORT_EXTERNAL_HOSTNAME:-$PUBLIC_IP}:${TELEPORT_EXTERNAL_PORT:-3080}
EOF

    # write ssh/tunnel config
    write_ssh_and_tunnel_section 3080

    # if we are using letsencrypt, append config lines
    if [[ "${USE_LETSENCRYPT}" == "true" ]]; then
        echo "Letsencrypt support enabled"
        # these variables must all be set for letsencrypt to work
        # it also needs the running instance to have permissions to read from/write to the S3 bucket
        if [[ "${TELEPORT_DOMAIN_ADMIN_EMAIL}" != "" && "${TELEPORT_DOMAIN_NAME}" != "" && "${TELEPORT_S3_BUCKET}" != "" ]]; then
            write_https_keypairs_section

            # set up the database listeners
            write_database_section TELEPORT_EXTERNAL_HOSTNAME

            # set up the kubernetes listener
            write_kubernetes_section TELEPORT_EXTERNAL_HOSTNAME

            # enable/start cert services and timers
            systemctl_wrap enable teleport-get-cert.service teleport-get-cert.timer
            systemctl_wrap start teleport-get-cert.timer

            systemctl_wrap enable teleport-renew-cert.service teleport-renew-cert.timer
            systemctl_wrap start --no-block teleport-renew-cert.timer

            systemctl_wrap enable teleport-check-cert.service teleport-check-cert.timer
            systemctl_wrap start --no-block teleport-check-cert.timer

            systemctl_wrap start --no-block teleport-get-cert.service
      fi
    elif [[ "${USE_ACM}" == "true" ]]; then
        echo "ACM support enabled"

        # set up the database listeners
        write_database_section TELEPORT_EXTERNAL_HOSTNAME

        # set up the kubernetes listener
        write_kubernetes_section TELEPORT_EXTERNAL_HOSTNAME

        systemctl_wrap disable teleport.service
        systemctl_wrap stop --no-block teleport.service

        systemctl_wrap enable teleport-acm.service
        systemctl_wrap start --no-block teleport-acm.service
    fi

else
    echo "No Teleport role provided via TELEPORT_ROLE; using generic all-in-one config"

    # tunnel_listen_addr needs to be changed if we're using ACM as the listener cannot understand HTTP, only HTTPS
    if [[ "${USE_ACM}" == "true" ]]; then
        rm -f ${USE_CONFD_DIR}/use-letsencrypt
        rm -f ${USE_CONFD_DIR}/role.all
        echo "all-acm" > ${USE_CONFD_DIR}/role.all-acm
        TUNNEL_LISTEN_PORT=3024
    else
        rm -f ${USE_CONFD_DIR}/role.all-acm
        echo "all" > ${USE_CONFD_DIR}/role.all
        TUNNEL_LISTEN_PORT=3080
    fi

    cat >${USE_CONFIG_PATH} <<EOF
teleport:
  nodename: ${LOCAL_HOSTNAME}
  advertise_ip: ${LOCAL_IP}
  log:
    output: stderr
    severity: INFO
  data_dir: /var/lib/teleport
  storage:
    type: dir
    path: /var/lib/teleport/backend

auth_service:
  enabled: yes
  keep_alive_interval: 1m
  keep_alive_count_max: 3
  listen_addr: 0.0.0.0:3025
  authentication:
    ${AUTHENTICATION_STANZA}
  cluster_name: ${TELEPORT_CLUSTER_NAME}

ssh_service:
  enabled: yes
  listen_addr: 0.0.0.0:3022

proxy_service:
  enabled: yes
  listen_addr: 0.0.0.0:3023
  tunnel_listen_addr: 0.0.0.0:${TUNNEL_LISTEN_PORT}
  web_listen_addr: 0.0.0.0:3080
  public_addr: ${TELEPORT_EXTERNAL_HOSTNAME:-$PUBLIC_IP}:${TELEPORT_EXTERNAL_PORT:-3080}
EOF

    # write ssh/tunnel config
    write_ssh_and_tunnel_section 3080

    # set up the database listeners
    write_database_section TELEPORT_EXTERNAL_HOSTNAME

    # set up the kubernetes listener
    write_kubernetes_section TELEPORT_EXTERNAL_HOSTNAME

    # if we are using letsencrypt, append config lines
    if [[ "${USE_LETSENCRYPT}" == "true" ]]; then
        echo "Letsencrypt support enabled"
        # these variables must all be set for letsencrypt to work
        # it also needs the running instance to have permissions to read from/write to the S3 bucket
        if [[ "${TELEPORT_DOMAIN_ADMIN_EMAIL}" != "" && "${TELEPORT_DOMAIN_NAME}" != "" && "${TELEPORT_S3_BUCKET}" != "" ]]; then
            write_https_keypairs_section

            # enable/start cert services and timers
            systemctl_wrap enable teleport-get-cert.service teleport-get-cert.timer
            systemctl_wrap start teleport-get-cert.timer

            systemctl_wrap enable teleport-renew-cert.service teleport-renew-cert.timer
            systemctl_wrap start --no-block teleport-renew-cert.timer

            systemctl_wrap enable teleport-check-cert.service teleport-check-cert.timer
            systemctl_wrap start --no-block teleport-check-cert.timer

            systemctl_wrap start --no-block teleport-get-cert.service
        fi
    elif [[ "${USE_ACM}" == "true" ]]; then
        echo "ACM support enabled"

        systemctl_wrap disable teleport.service
        systemctl_wrap stop --no-block teleport.service

        systemctl_wrap enable teleport-acm.service
        systemctl_wrap start --no-block teleport-acm.service
    fi
fi

# enable telegraf service if running in cluster mode
if [[ "${TELEPORT_ROLE}" == "auth" || "${TELEPORT_ROLE}" == "node" || "${TELEPORT_ROLE}" == "proxy" ]]; then
    # Install teleport telegraf configuration
    # Telegraf will collect prometheus metrics and send to influxdb collector
    cat >/etc/telegraf/telegraf.conf <<EOF
# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = 1000
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  precision = ""
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

[[inputs.procstat]]
  exe = "teleport"
  prefix = "teleport"

[[inputs.prometheus]]
  # An array of urls to scrape metrics from.
  urls = ["http://127.0.0.1:3000/metrics"]
  # Add a metric name prefix
  name_prefix = "teleport_"
  # Add tags to be able to make beautiful dashboards
  [inputs.prometheus.tags]
    teleservice = "teleport"

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points = ["/"]

  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs", "devfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Read metrics about network usage
[[inputs.net]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  urls = ["${TELEPORT_INFLUXDB_ADDRESS}"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "telegraf" # required

  ## Retention policy to write to. Empty string writes to the default rp.
  retention_policy = ""
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
  write_consistency = "any"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"
EOF
    systemctl_wrap enable telegraf.service
    systemctl_wrap restart telegraf.service
# handle configuration for agent mode
elif [[ "${TELEPORT_ROLE}" == "agent" ]]; then
    echo "agent" > ${USE_CONFD_DIR}/role.agent
    cat >${USE_CONFIG_PATH} <<EOF
version: v3
teleport:
  log:
    output: stderr
    severity: INFO
  data_dir: /var/lib/teleport
  join_params:
    join_method: token
    token_name: ${TELEPORT_JOIN_TOKEN}
  proxy_server: ${TELEPORT_PROXY_SERVER_LB}

auth_service:
  enabled: no
proxy_service:
  enabled: no
EOF

  # enable SSH service
  if [[ "${TELEPORT_AGENT_SSH_ENABLED}" == "true" ]]; then
    cat >>${USE_CONFIG_PATH} <<EOF
ssh_service:
  enabled: yes
EOF
    # add SSH labels
    if [[ "${TELEPORT_AGENT_SSH_LABELS}" != "" ]]; then
      # replace | with a literal newline and space
      TELEPORT_AGENT_SSH_LABELS_EXPANDED="${TELEPORT_AGENT_SSH_LABELS//|/
    }"
      cat >>${USE_CONFIG_PATH} <<EOF
  labels:
    ${TELEPORT_AGENT_SSH_LABELS_EXPANDED}
EOF
    fi
  else
    # we have to explicitly disable the SSH service if it's not being used, as it historically defaults to enabled
    cat >>${USE_CONFIG_PATH} <<EOF
  ssh_service:
    enabled: no
EOF
  fi

  # enable database service
  if [[ "${TELEPORT_AGENT_DB_ENABLED}" == "true" ]]; then
    cat >>${USE_CONFIG_PATH} <<EOF
db_service:
  enabled: yes
  databases:
  - name: ${TELEPORT_AGENT_DB_NAME}
    description: "${TELEPORT_AGENT_DB_DESCRIPTION:-""}"
    protocol: ${TELEPORT_AGENT_DB_PROTOCOL}
    uri: "${TELEPORT_AGENT_DB_URI}"
    aws:
      region: ${TELEPORT_AGENT_DB_REGION:-$EC2_REGION}
EOF
    # add Redshift-specific config
    if [[ "${TELEPORT_AGENT_DB_REDSHIFT_CLUSTER_ID}" != "" ]]; then
          cat >>${USE_CONFIG_PATH} <<EOF
      redshift:
        cluster_id: "${TELEPORT_AGENT_DB_REDSHIFT_CLUSTER_ID}"
EOF
    fi
    # add Database labels
    if [[ "${TELEPORT_AGENT_DB_LABELS}" != "" ]]; then
      # replace | with a literal newline and space
      TELEPORT_AGENT_DB_LABELS_EXPANDED="${TELEPORT_AGENT_DB_LABELS//|/
      }"
      cat >>${USE_CONFIG_PATH} <<EOF
    static_labels:
      ${TELEPORT_AGENT_DB_LABELS_EXPANDED}
EOF
    fi
  fi

# enable app service
  if [[ "${TELEPORT_AGENT_APP_ENABLED}" == "true" ]]; then
    cat >>${USE_CONFIG_PATH} <<EOF
app_service:
  enabled: yes
  apps:
  - name: ${TELEPORT_AGENT_APP_NAME}
    description: "${TELEPORT_AGENT_APP_DESCRIPTION:-""}"
    uri: "${TELEPORT_AGENT_APP_URI}"
EOF
    # add public_addr if set
    if [[ "${TELEPORT_AGENT_APP_PUBLIC_ADDR}" != "" ]]; then
      cat >>${USE_CONFIG_PATH} <<EOF
    public_addr: "${TELEPORT_AGENT_APP_PUBLIC_ADDR}"
EOF
    fi
    # add insecure_skip_verify if set
    if [[ "${TELEPORT_AGENT_APP_INSECURE_SKIP_VERIFY}" == "true" ]]; then
      cat >>${USE_CONFIG_PATH} <<EOF
    insecure_skip_verify: true
EOF
    fi
    # add app labels
    if [[ "${TELEPORT_AGENT_APP_LABELS}" != "" ]]; then
      # replace | with a literal newline and space
      TELEPORT_AGENT_APP_LABELS_EXPANDED="${TELEPORT_AGENT_APP_LABELS//|/
      }"
      cat >>${USE_CONFIG_PATH} <<EOF
    labels:
      ${TELEPORT_AGENT_APP_LABELS_EXPANDED}
EOF
    fi
  fi

  # enable service
  systemctl_wrap start --no-block teleport.service
fi

# make sure config file can be edited by pre-start commands running later (assuming it exists)
if [ -f ${USE_CONFIG_PATH} ]; then
    if getent passwd teleport >/dev/null 2>&1 && getent group adm >/dev/null 2>&1; then
        chown teleport:adm ${USE_CONFIG_PATH}
    fi
fi
